#!/usr/bin/env bash
set -o nounset
set -e

if hash realpath 2> /dev/null; then
    DIR="$( cd "$(dirname $(realpath "${BASH_SOURCE[0]}" ))" && pwd )";
elif hash readlink 2> /dev/null; then
    DIR="$( cd "$(dirname $(readlink "${BASH_SOURCE[0]}" ))" && pwd )";
else
    DIR="$( cd "$(dirname "${BASH_SOURCE[0]}" )" && pwd )";
fi

source "$DIR/lib.sh";

# Define the library/program to use for patching. Valid options are "patch" and "git"
: ${PATCH_MODE="patch"}
: ${VERBOSE=""}

function _check_argument_patch_file() {
    if [[ "$#" -lt "1" ]]; then
        lib::print_error "Required argument patch file missing";
        exit 1;
    fi

    if [[ ! -e "$1" ]]; then
        lib::print_error "Provided patch file '$1' does not exist";
        exit 1;
    fi
}

function _find_patches_with_prefix() {
    local patch_file="$1";
    local prefix="$2";
    local relative_to_theme="$3";
    for file in `mage::list-patches ${patch_file}`; do
        if [[ "$file" =~ ^$prefix.* ]]; then
            if [[ "$relative_to_theme" == "yes" ]]; then
                _make_theme_path_relative "$file" "$prefix";
            else
                echo "$file";
            fi
        fi
    done
}

function _make_theme_path_relative() {
    local file="$1";
    local prefix="$2";
    echo "$file" | sed -e "s!^$prefix!!" | sed -e "s|^/*[^/]*||" | sed -e "s|^/*[^/]*/||";
}

function _find_custom_templates() {
    local subdirectory_name="$1";
    find -L "$subdirectory_name" \
        -mindepth 3 \
        -type f \
        -not -path "*/default/blank/*" \
        -not -path "*/default/default/*" \
        -not -path "*/default/modern/*" \
        -not -path "*/default/iphone/*" \
        -not -path "*/rwd/default/*" \
        -not -path "*/base/default/*"
}

function _find_files_to_patch_with_prefix() {
    lib::check_magento_root;
    _check_argument_patch_file "$@";

    local patch_file="$1";
    local prefix="$2";

    if [[ ! -e "$prefix" ]]; then
        lib::print_warning "Directory '$prefix' defined in prefix does not exist";
        return;
    fi

    local patched_files=$(_find_patches_with_prefix "$patch_file" "$prefix" "yes");
    local custom_templates=$(_find_custom_templates "$prefix");

    while read -r custom_template; do
        # echo "Looking for custom template: $(_make_theme_path_relative "$custom_template" "$prefix";) in $patched_files";

        if [[ "$custom_template" != "" ]]; then
            local custom_template_relative=$(_make_theme_path_relative "$custom_template" "$prefix");
            set +e;
            echo "$patched_files" | grep -q "$custom_template_relative" && {
                if [[ "$VERBOSE" != "false" ]]; then
                    lib::print_info "Custom template: $custom_template";
                    lib::print_info "Patch:";
                    local escaped_custom_template=$(echo ${custom_template_relative} | sed -e 's!/!\\/!g');
                    sed -n -e "/$escaped_custom_template/,/diff/p" "$patch_file" | sed ';$d';
                    echo "";
                    echo "";
                else
                    echo "$custom_template";
                fi
            }
            set -e;
        fi
    done <<< "$custom_templates"
}

function _patch_stat() {
    sed -e '1,/^__PATCHFILE_FOLLOWS__$/d' "$1" | git apply --stat $2 -p0;
}

function mage::simulate() {
    lib::check_magento_root;
    _check_argument_patch_file "$@";

    local patch_file="$1";

    local REVERT_FLAG="";
    if [[ "$(lib::has_argument "-R" $@)" == "true" ]] || [[ "$(lib::has_argument "--revert" $@)" == "true" ]] ;then
        REVERT_FLAG="-R";
    fi

    lib::print_info "Checking if patch can be applied/reverted successfully"
    local result;
    local status;
    set +e;
    if [[ "$PATCH_MODE" == "patch" ]]; then
        result=`sed -e '1,/^__PATCHFILE_FOLLOWS__$/d' "$patch_file" | patch --dry-run $REVERT_FLAG -p0`
        status=$?
    elif [[ "$PATCH_MODE" == "git" ]]; then
        result=`sed -e '1,/^__PATCHFILE_FOLLOWS__$/d' "$patch_file" | git apply --check ${REVERT_FLAG} -p0 2>&1`;
        status=$?
    fi

    if [ ${status} -eq 1 ] ; then
        if [[ "$VERBOSE" != "false" ]]; then
            lib::print_error "Patch can't be applied/reverted successfully.
$result";
            _patch_stat ${patch_file} "${REVERT_FLAG}";
        else
            lib::print_error "Patch can't be applied/reverted successfully."
        fi
        exit 1;
    fi
    if [ ${status} -eq 2 ] ; then
        lib::print_error "Patch can't be applied/reverted successfully.";
        exit 2;
    fi

    if [[ "$REVERT_FLAG" != "-R" ]];then
        lib::print_success "Patch can be applied";
    else
        lib::print_success "Patch can be reverted";
    fi
    if [[ "$VERBOSE" != "false" ]]; then
        _patch_stat ${patch_file} ${REVERT_FLAG};
        echo "$result";
    fi
}

function mage::apply() {
    lib::check_magento_root;
    _check_argument_patch_file "$@";

    local patch_file="$1";
    shift;

    /usr/bin/env bash "$patch_file" "$@";
}

function mage::list() {
    lib::check_magento_root;
    _check_argument_patch_file "$@";

    local patch_file="$1";
    shift;

    /usr/bin/env bash "$patch_file" "--list";
}

function mage::list-patches() {
    _check_argument_patch_file "$@";

    grep "^diff " "$1" | awk '{print $3;}';
}

function mage::list-patches-frontend-files() {
    _check_argument_patch_file "$@";
    _find_patches_with_prefix "$1" "app/design/frontend/" "no";
    _find_patches_with_prefix "$1" "skin/frontend/" "no";
}

function mage::list-patches-adminhtml-files() {
    _check_argument_patch_file "$@";
    _find_patches_with_prefix "$1" "app/design/adminhtml/" "no";
    _find_patches_with_prefix "$1" "skin/adminhtml/" "no";
}

function mage::list-custom-frontend-files() {
    _find_custom_templates "app/design/frontend/";
}

function mage::list-custom-adminhtml-files() {
    _find_custom_templates "app/design/adminhtml/";
}

function mage::find-files() {
    mage::find-frontend-files "$@";
    mage::find-adminhtml-files "$@";
}

function mage::find-frontend-files() {
    lib::check_magento_root;
    _check_argument_patch_file "$@";
    _find_files_to_patch_with_prefix "$1" "app/design/frontend/";
    _find_files_to_patch_with_prefix "$1" "skin/frontend/";
}

function mage::find-adminhtml-files() {
    lib::check_magento_root;
    _check_argument_patch_file "$@";
    _find_files_to_patch_with_prefix "$1" "app/design/adminhtml/";
    _find_files_to_patch_with_prefix "$1" "skin/adminhtml/";
}

function mage::help() {
    echo "Usage: $0 command

apply                           Applies the patch
list                            Show list of applied patches
simulate                        Perform a dry run of the patch
find-files                      Search for non-core template and skin files that should be patched
find-frontend-files             Search for non-core template and skin files for the frontend that should be patched
find-adminhtml-files            Search for non-core template and skin files for the backend that should be patched
list-patches                    List all patched files
list-patches-adminhtml-files    List all patched files for the backend
list-patches-frontend-files     List all patched files for the frontend
list-custom-frontend-files      Search for non-core template and skin files for the frontend
list-custom-adminhtml-files     Search for non-core template and skin files for the backend

";
}

function run () {
    if [[ "$#" -lt "1" ]]; then
        lib::print_error "Missing argument 'command'";
        mage::help;

        exit 1;
    fi

    lib::check_utilities;

    COMMAND="$1";
    shift;

    if [[ "$VERBOSE" == "" ]]; then
        VERBOSE=$(lib::has_argument "-v" "$@");
    fi

    if type "mage::$COMMAND" &> /dev/null; then
        mage::${COMMAND} "$@";
    else
        lib::print_error "Command '$COMMAND' not found";
    fi
}

run "$@";

#!/usr/bin/env bash
set -o nounset
set -e

if hash realpath 2> /dev/null; then
    DIR="$( cd "$(dirname $(realpath "${BASH_SOURCE[0]}" ))" && pwd )";
elif hash readlink 2> /dev/null && [[ "$(uname -s)" != "Darwin" ]]; then
    DIR="$( cd "$(dirname $(readlink -f "${BASH_SOURCE[0]}" ))" && pwd )";
else
    DIR="$( cd "$(dirname "${BASH_SOURCE[0]}" )" && pwd )";
fi

if [[ -e "lib.sh" ]]; then source "lib.sh"; fi
source "$DIR/lib.sh";


# Define the library/program to use for patching. Valid options are "patch" and "git"
: ${PATCH_MODE=""}
: ${VERBOSE=""}

: ${MAG_ID=""}
: ${MAG_TOKEN=""}

function _check_argument_patch_file() {
    if [[ "$#" -lt "1" ]]; then
        lib::print_error "Required argument patch file missing";
        exit 1;
    fi

    if [[ ! -e "$1" ]]; then
        lib::print_error "Provided patch file '$1' does not exist";
        exit 1;
    fi
}

function _find_patches_with_prefix() {
    local patch_file="$1";
    local prefix="$2";
    local relative_to_theme="$3";
    for file in `mage::list-patches ${patch_file}`; do
        if [[ "$file" =~ ^$prefix.* ]]; then
            if [[ "$relative_to_theme" == "yes" ]]; then
                _make_theme_path_relative "$file" "$prefix";
            else
                echo "$file";
            fi
        fi
    done
}

function _check_mage_api_credentials() {
    if [[ "$MAG_ID" == "" ]]; then
        lib::print_error "Please specify the environment variable MAG_ID";
        exit 1;
    fi
    if [[ "$MAG_TOKEN" == "" ]]; then
        lib::print_error "Please specify the environment variable MAG_TOKEN";
        exit 1;
    fi
}

function _make_theme_path_relative() {
    local file="$1";
    local prefix="$2";
    echo "$file" | sed -e "s!^$prefix!!" | sed -e "s|^/*[^/]*||" | sed -e "s|^/*[^/]*/||";
}

function _find_custom_templates() {
    local subdirectory_name="$1";
    find -L "$subdirectory_name" \
        -mindepth 3 \
        -type f \
        -not -path "*/default/blank/*" \
        -not -path "*/default/default/*" \
        -not -path "*/default/modern/*" \
        -not -path "*/default/iphone/*" \
        -not -path "*/rwd/default/*" \
        -not -path "*/base/default/*"
}

function _find_files_to_patch_with_prefix() {
    lib::check_magento_root;
    _check_argument_patch_file "$@";

    local patch_file="$1";
    local prefix="$2";

    if [[ ! -e "$prefix" ]]; then
        lib::print_warning "Directory '$prefix' defined in prefix does not exist";
        return;
    fi

    local patched_files=$(_find_patches_with_prefix "$patch_file" "$prefix" "yes");
    local custom_templates=$(_find_custom_templates "$prefix");

    while read -r custom_template; do
        # echo "Looking for custom template: $(_make_theme_path_relative "$custom_template" "$prefix";) in $patched_files";

        if [[ "$custom_template" != "" ]]; then
            local custom_template_relative=$(_make_theme_path_relative "$custom_template" "$prefix");
            set +e;
            echo "$patched_files" | grep -q "$custom_template_relative" && {
                if [[ "$VERBOSE" != "false" ]]; then
                    lib::print_info "Custom template: $custom_template";
                    lib::print_info "Patch:";
                    local escaped_custom_template=$(echo ${custom_template_relative} | sed -e 's!/!\\/!g');
                    sed -n -e "/$escaped_custom_template/,/diff/p" "$patch_file" | sed ';$d';
                    echo "";
                    echo "";
                else
                    echo "$custom_template";
                fi
            }
            set -e;
        fi
    done <<< "$custom_templates"
}

function _extract_patch() {
    if [[ "$#" -lt "1" ]]; then
        lib::print_error "Required argument patch file missing";
        exit 1;
    fi
    sed -e '1,/^__PATCHFILE_FOLLOWS__$/d' "$1";
}

function _patch_stat() {
    local revert_flag="";
    if [[ "$#" -gt "1" ]]; then
        revert_flag="-R";
    fi

    if [[ "$#" -lt "1" ]]; then
        lib::print_error "Required argument patch file missing";
        exit 1;
    fi
    _extract_patch $1 | git apply --stat $2 -p0;
}

function _get_patch_mode() {
    if [[ "$PATCH_MODE" == "" ]]; then
        if [[ "$(lib::has_argument "--git" $@)" == "true" ]]; then
            PATCH_MODE="git";
        else
            PATCH_MODE="patch";
        fi
    fi
    echo "$PATCH_MODE";
}

function mage::simulate() {
    lib::check_magento_root;
    _check_argument_patch_file "$@";

    local patch_file="$1";
    local result;
    local status;

    local revert_flag="";
    if [[ "$(lib::has_argument "-R" $@)" == "true" ]] || [[ "$(lib::has_argument "--revert" $@)" == "true" ]] ;then
        revert_flag="-R";
    fi

    local ignore_whitespace="";
    if [[ "$(lib::has_argument "--ignore-whitespace" $@)" == "true" ]] ;then
        ignore_whitespace="--ignore-whitespace";
    fi

    local action="applied";
    if [[ "$revert_flag" == "-R" ]] ;then
        action="reverted";
    fi

    local patch_mode="$(_get_patch_mode "$@")";

    lib::print_info "Checking if patch can be $action successfully (using $patch_mode)";

    set +e;
    if [[ "$patch_mode" == "patch" ]]; then
        result=`_extract_patch ${patch_file} | patch --dry-run ${revert_flag} ${ignore_whitespace} -p0`
        status=$?
    elif [[ "$patch_mode" == "git" ]]; then
        result=`_extract_patch ${patch_file} | git apply --check ${revert_flag} ${ignore_whitespace} -p0 2>&1`;
        status=$?
    else
        lib::print_error "Invalid patch mode '$PATCH_MODE'";
        exit 3;
    fi

    if [[ ${status} -eq 1 ]] ; then
        if [[ "$VERBOSE" != "false" ]]; then
            lib::print_error "Patch can't be $action successfully.
$result";
            _patch_stat ${patch_file} "$revert_flag";
        else
            lib::print_error "Patch can't be $action successfully."
        fi
        exit 1;
    fi
    if [[ ${status} -eq 2 ]] ; then
        lib::print_error "Patch can't be $action successfully.";
        exit 2;
    fi

    if [[ "$revert_flag" != "-R" ]];then
        lib::print_success "Patch can be applied";
    else
        lib::print_success "Patch can be reverted";
    fi
    if [[ "$VERBOSE" != "false" ]]; then
        _patch_stat ${patch_file} "$revert_flag";
        echo "$result";
    fi
}

function mage::sim() {
    mage::simulate "$@";
}

function mage::apply() {
    lib::check_magento_root;
    _check_argument_patch_file "$@";

    local patch_file="$1";
    shift;

    /usr/bin/env bash "$patch_file" "$@";
}

function mage::list() {
    lib::check_magento_root;

    # If a patch file is given call it to list the applied patches
    if [[ "$#" -gt "0" ]]; then
         _check_argument_patch_file "$@";

        local patch_file="$1";
        shift;

        /usr/bin/env bash "$patch_file" "--list";

        exit 0;
    fi

    # Manually read the patches
    local applied_patches_list_file="app/etc/applied.patches.list";

    lib::print_info "Applied/reverted patches list:";
    if [[ -e "$applied_patches_list_file" ]]; then
        if [[ ! -r "$applied_patches_list_file" ]]; then
            lib::print_error "\"$applied_patches_list_file\" must be readable so applied patches list can be shown."
            exit 1;
        else
            sed -n "/SUP-\|SUPEE-/p" "$applied_patches_list_file";
        fi
    else
        echo "<empty>";
    fi
}

function mage::list-patches() {
    _check_argument_patch_file "$@";

    grep "^diff " "$1" | awk '{print $3;}';
}

function mage::list-patches-frontend-files() {
    _check_argument_patch_file "$@";
    _find_patches_with_prefix "$1" "app/design/frontend/" "no";
    _find_patches_with_prefix "$1" "skin/frontend/" "no";
}

function mage::list-patches-adminhtml-files() {
    _check_argument_patch_file "$@";
    _find_patches_with_prefix "$1" "app/design/adminhtml/" "no";
    _find_patches_with_prefix "$1" "skin/adminhtml/" "no";
}

function mage::list-patches-classes() {
    _check_argument_patch_file "$@";

     grep "\sclass " "$1" | \
        # Remove comments
        sed 's!/.*!!' | \
        # Remove '+     '
        sed 's!+\s*!!' | \
        # Remove empty lines
        awk 'NF' | \
        # Remove everything before 'class'
        sed 's!^.*class !!' | \
        # Use only the class name
        awk '{print $1;}' | \
        # Remove duplicates
        awk '!a[$0]++';
}

function mage::list-custom-frontend-files() {
    _find_custom_templates "app/design/frontend/";
}

function mage::list-custom-adminhtml-files() {
    _find_custom_templates "app/design/adminhtml/";
}

function mage::find-files() {
    mage::find-frontend-files "$@";
    mage::find-adminhtml-files "$@";
}

function mage::find-frontend-files() {
    lib::check_magento_root;
    _check_argument_patch_file "$@";
    _find_files_to_patch_with_prefix "$1" "app/design/frontend/";
    _find_files_to_patch_with_prefix "$1" "skin/frontend/";
}

function mage::find-adminhtml-files() {
    lib::check_magento_root;
    _check_argument_patch_file "$@";
    _find_files_to_patch_with_prefix "$1" "app/design/adminhtml/";
    _find_files_to_patch_with_prefix "$1" "skin/adminhtml/";
}

function mage::repo-help {
    _check_mage_api_credentials;

    mage::repo-list "help";
}

function mage::repo-list {
    _check_mage_api_credentials;
    local resource;
    if [[ "$#" -gt "0" ]]; then
        resource="$1";
    else
        resource="files";
    fi

    curl -s "https://$MAG_ID:$MAG_TOKEN@www.magentocommerce.com/products/downloads/info/$resource"
}

function mage::repo-download {
    _check_mage_api_credentials;
    if [[ "$#" -lt "1" ]]; then
        lib::print_error "Required argument patch file missing";
        exit 1;
    fi

    curl -O "https://$MAG_ID:$MAG_TOKEN@www.magentocommerce.com/products/downloads/file/$1"
}

function mage::repo-get {
    mage::repo-download "$@";
}

function mage::get {
    mage::repo-download "$@";
}

function mage::help() {
    echo "Usage: $0 command

apply                           Applies the patch
simulate                        Perform a dry run of the patch
list                            Show list of applied patches
find-files                      Search for non-core template and skin files that should be patched
find-frontend-files             Search for non-core template and skin files for the frontend that should be patched
find-adminhtml-files            Search for non-core template and skin files for the backend that should be patched
list-patches                    List all patched files
list-patches-classes            List all patched classes
list-patches-adminhtml-files    List all patched files for the backend
list-patches-frontend-files     List all patched files for the frontend
list-custom-frontend-files      Search for non-core template and skin files for the frontend
list-custom-adminhtml-files     Search for non-core template and skin files for the backend
repo-help                       Show available commands for repo-list
repo-list                       List all available patches
repo-download                   Download a patch file
";
}

function run () {
    if [[ "$#" -lt "1" ]]; then
        lib::print_error "Missing argument 'command'";
        mage::help;

        exit 1;
    fi
    if [[ "$(lib::has_argument "-h" "$@")" == "true" ]] \
        || [[ "$(lib::has_argument "--help" "$@")" == "true" ]] \
        || [[ "$(lib::has_argument "help" "$@")" == "true" ]]; then
        mage::help;

        exit 0;
    fi

    lib::check_utilities;

    if [[ "$VERBOSE" == "" ]]; then
        VERBOSE=$(lib::has_argument "-v" "$@");
    fi

    # Check if argument 1 is the patch file and argument 2 is the command
    if [[ "$#" -gt "1" && -e "$1" && $(lib::command_exists "$2") == "true" ]]; then
        COMMAND="$2";
        PATCH_FILE="$1";
        shift;
        shift;

        if type "mage::$COMMAND" &> /dev/null; then
            mage::${COMMAND} "$PATCH_FILE" "$@";
        else
            lib::print_error "Command '$COMMAND' not found";
        fi
    else
        COMMAND="$1";
        shift;

        if type "mage::$COMMAND" &> /dev/null; then
            mage::${COMMAND} "$@";
        else
            lib::print_error "Command '$COMMAND' not found";
        fi
    fi
}

run "$@";
